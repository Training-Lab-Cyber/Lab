# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License..

steps:
- id: 'branch name'
  name: 'alpine'
  entrypoint: 'sh'  
  args: 
  - '-c'
  - | 
      echo "***********************"
      echo "$BRANCH_NAME"
      echo "***********************"

- id: 'tf init'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      if [ -d "Terraform/environments/$BRANCH_NAME/" ]; then
        cd Terraform/environments/$BRANCH_NAME
        terraform init
      else
        for dir in Terraform/environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}  
          echo ""
          echo "*************** TERRAFORM INIT ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init || exit 1
          cd ../../
        done
      fi 

# [START tf-plan]
- id: 'tf plan'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "Terraform/environments/$BRANCH_NAME/" ]; then
        cd Terraform/environments/$BRANCH_NAME
        terraform plan
      else
        for dir in Terraform/environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}  
          echo ""
          echo "*************** TERRAFORM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform plan || exit 1
          cd ../../
        done
      fi 
# [END tf-plan]

# [START tf-apply]
- id: 'tf apply'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "Terraform/environments/$BRANCH_NAME/" ]; then
        cd Terraform/environments/$BRANCH_NAME      
        terraform apply -auto-approve
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi
# [END tf-apply]


# [START terraform output]
- id: 'tf output'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ -d "Terraform/environments/$BRANCH_NAME/" ]; then
        cd Terraform/environments/$BRANCH_NAME      
        terraform output -json > ../../../Ansible/terraform_output.json
        cat ../../../Ansible/terraform_output.json
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi
# [END terraform output]


# [START Ansible Inventory Creation]
- id: 'generate inventory'
  name: 'python:3.9'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      cd Ansible/      
      python generate_inventory.py inventory.ini
      cat inventory.ini
      
# [END Ansible Inventory Creation]






# [START Ansible Playbook]
- id: 'Copy Ansible files and Run Ansible Playbook'
  name: 'google/cloud-sdk'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      ANSIBLE_INSTANCE_NAME=$(cat terraform_output.json | jq -r Ansible/ansible_instance_name.value)
      gcloud compute scp --zone us-west1-a --recurse Ansible/* $ANSIBLE_INSTANCE_NAME:~/Ansible
      gcloud compute ssh --zone us-west1-a $ANSIBLE_INSTANCE_NAME --command "cd ~/Ansible && ansible-playbook -i inventory.ini playbook.yml"

# [END Ansible Playbook]

# [START tf-destroy]
- id: 'tf destroy'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "Terraform/environments/$BRANCH_NAME/" ]; then
        cd Terraform/environments/$BRANCH_NAME      
        echo "***************************** STARTING DESTROY *******************************"
        terraform destroy -auto-approve
      else
        echo "***************************** SKIPPING DESTROY *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi
# [END tf-destroy] 

options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
