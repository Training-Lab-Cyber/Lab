# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License..

substitutions:
  _ANSIBLE_PRIVATE_KEY: ""

options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET


steps:
  - id: "branch name"
    name: "alpine"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        echo "***********************"
        echo "$BRANCH_NAME"
        echo "***********************"

  
  # [START ssh-keygen]
  - id: 'Create SSH Key Pair'
    name: 'gcr.io/cloud-builders/openssl'
    args: ['ssh-keygen', '-t', 'rsa', '-b', '2048', '-f', '/workspace/ansible_key', '-q', '-N', '']
  # [END ssh-keygen]

# [START Secrets create]
  - id: 'Register SSH Private Key to Secret Manager'
    name: "alpine"
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # シークレットが存在するか確認
        if gcloud secrets describe ansible_key &>/dev/null; then
          echo "Secret 'ansible_key' already exists. Adding a new version..."
          gcloud secrets versions add ansible_key --data-file=/workspace/ansible_key
        else
          echo "Creating new secret 'ansible_key'..."
          gcloud secrets create ansible_key --data-file=/workspace/ansible_key
        fi
# [END Secrets create]

  - id: "tf init"
    name: "hashicorp/terraform:1.0.0"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "Terraform/environments/$BRANCH_NAME/" ]; then
          cd Terraform/environments/$BRANCH_NAME
          terraform init -var="public_key_path=/workspace/ansible_key.pub" -var="project=$PROJECT_ID"
        else
          for dir in Terraform/environments/*/
          do 
            cd ${dir}   
            env=${dir%*/}
            env=${env#*/}  
            echo ""
            echo "*************** TERRAFORM INIT ******************"
            echo "******* At environment: ${env} ********"
            echo "*************************************************"
            terraform init || exit 1
            cd ../../
          done
        fi

  # [START tf-plan]
  - id: "tf plan"
    name: "hashicorp/terraform:1.0.0"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "Terraform/environments/$BRANCH_NAME/" ]; then
          cd Terraform/environments/$BRANCH_NAME
          terraform plan -var="public_key_path=/workspace/ansible_key.pub" -var="project=$PROJECT_ID"
        else
          for dir in Terraform/environments/*/
          do 
            cd ${dir}   
            env=${dir%*/}
            env=${env#*/}  
            echo ""
            echo "*************** TERRAFORM PLAN ******************"
            echo "******* At environment: ${env} ********"
            echo "*************************************************"
            terraform plan || exit 1
            cd ../../
          done
        fi
  # [END tf-plan]
  # [START tf-apply]
  - id: "tf apply"
    name: "hashicorp/terraform:1.0.0"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "Terraform/environments/$BRANCH_NAME/" ]; then
          cd Terraform/environments/$BRANCH_NAME      
          terraform apply -auto-approve -var="public_key_path=/workspace/ansible_key.pub" -var="project=$PROJECT_ID"
        else
          echo "***************************** SKIPPING APPLYING *******************************"
          echo "Branch '$BRANCH_NAME' does not represent an official environment."
          echo "*******************************************************************************"
        fi
  # [END tf-apply]
  # [START terraform output]
  - id: "tf output"
    name: "hashicorp/terraform:1.0.0"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "Terraform/environments/$BRANCH_NAME/" ]; then
          cd Terraform/environments/$BRANCH_NAME      
          terraform output -json > /workspace/terraform_output.json
          cat /workspace/terraform_output.json
        else
          echo "***************************** SKIPPING APPLYING *******************************"
          echo "Branch '$BRANCH_NAME' does not represent an official environment."
          echo "*******************************************************************************"
        fi
  # [END terraform output]


  # [START Ansible Playbook]
  - id: 'Copy Ansible files and Run Ansible Playbook'
    name: 'google/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update > /dev/null 2>&1
        apt-get install -y ansible > /dev/null 2>&1
        apt-get install -y python3-google-auth > /dev/null 2>&1
        
        export _ANSIBLE_PRIVATE_KEY=$(gcloud secrets versions access latest --secret="ansible_key")
        echo "$_ANSIBLE_PRIVATE_KEY" > /workspace/ansible_key
        chmod 600 /workspace/ansible_key

        ansible-inventory -i Ansible/inventory/gcp.yaml --graph -vvvv
        ansible http_server -m command -a "hostname"

  # [END Ansible Playbook]


  # [START tf-destroy]
  - id: "tf destroy"
    name: "hashicorp/terraform:1.0.0"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "Terraform/environments/$BRANCH_NAME/" ]; then
          cd Terraform/environments/$BRANCH_NAME
          terraform destroy -auto-approve -var="public_key_path=/workspace/ansible_key.pub" -var="project=$PROJECT_ID"
        else
          for dir in Terraform/environments/*/
          do 
            cd ${dir}   
            env=${dir%*/}
            env=${env#*/}  
            echo ""
            echo "*************** TERRAFORM PLAN ******************"
            echo "******* At environment: ${env} ********"
            echo "*************************************************"
            terraform destroy || exit 1
            cd ../../
          done
        fi
  # [END tf-destroy]
